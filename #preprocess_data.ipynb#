{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Eigenvectors \n",
      " [[-0.36776971 -0.4607148  -0.31128171 -0.5323537  -0.09304761 -0.49511052\n",
      "  -0.13564019]\n",
      " [-0.36538573 -0.01335292 -0.10287394 -0.13115343 -0.41181689  0.68806117\n",
      "  -0.44216442]\n",
      " [-0.41241169 -0.10670148 -0.08538969 -0.10800763  0.09365532  0.3318173\n",
      "   0.82504564]\n",
      " [-0.43110661  0.41631363 -0.58246887  0.38462973  0.33370827 -0.13469196\n",
      "  -0.15529619]\n",
      " [-0.39020249  0.51429882  0.57211708 -0.41771748  0.23901756 -0.11552612\n",
      "  -0.10467675]\n",
      " [-0.02772751  0.44910744 -0.07846759  0.04241537 -0.78927674 -0.31603016\n",
      "   0.25834982]\n",
      " [-0.47146114 -0.3696763   0.46096003  0.60291432 -0.14672864 -0.19992849\n",
      "  -0.05977713]]\n",
      "\n",
      "Eigenvalues \n",
      " [2.40935768 1.49742848 0.30184725 0.38963835 0.91110243 0.79959603\n",
      " 0.69102978]\n",
      "7  dimensions retains a variance of  0.9999999999999999\n",
      "6  dimensions retains a variance of  0.9568789640347986\n",
      "5  dimensions retains a variance of  0.9012163427455322\n",
      "4  dimensions retains a variance of  0.8024978027437629\n",
      "3  dimensions retains a variance of  0.6882697987319406\n",
      "2  dimensions retains a variance of  0.5581123086371244\n",
      "1  dimensions retains a variance of  0.34419395386246293\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYkAAAEKCAYAAADn+anLAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+17YcXAAAWx0lEQVR4nO3de7QlZXnn8e+P5iaI4eKREFqkzUIFnUkbTzo6OAbxhiZGnDgjXnsMsTXjdSbJBC9rRrPiLMnE6Iq6cDqCdIwXFDUiURCRy5AY8DQ0t2kN2DIJsRc0i2vjhCzgmT+qju7pOdVnn96n9t7dfD9r7bWr3v1W1fOe3X2e89Zb9VaqCkmSFrLXpAOQJE0vk4QkqZNJQpLUySQhSepkkpAkdTJJSJI69Z4kkqxIck2S89v1VUmuTHJTknOS7Nt3DJKkXTOOnsQ7gM0D66cDH66qY4C7gFPHEIMkaRf0miSSrAR+Ffhkux7gRODctsoG4OQ+Y5Ak7bq9e97/R4D/DBzUrh8G3F1VD7brtwJHLrRhknXAOoADDzzwGU95ylN6DlWS9iwbN268o6pmRtlHb0kiya8Bt1fVxiQnzBcvUHXBeUGqaj2wHmB2drbm5uZ6iVOS9lRJ/veo++izJ3E88OtJXgLsDzyGpmdxcJK9297ESuBHPcYgSRpBb2MSVfWuqlpZVUcDpwDfrqrXAJcAr2irrQW+2lcMkqTRTOI+id8H/lOSm2nGKM6cQAySpCH0PXANQFVdClzaLm8B1ozjuJKk0XjHtSSpk0lCktTJJCFJ6mSSkCR1MklIkjqZJCRJnUwSkqROJglJUieThCSpk0lCktTJJCFJ6mSSkCR1MklIkjqZJCRJnUwSkqROJglJUieThCSpk0lCktSptySRZP8kVyW5NsmNSd7flp+d5IdJNrWv1X3FIEkaTZ/PuH4AOLGqtifZB7giyTfaz36vqs7t8diSpGXQW5KoqgK2t6v7tK/q63iSpOXX65hEkhVJNgG3AxdV1ZXtRx9Icl2SDyfZr88YJEm7rtckUVUPVdVqYCWwJsnTgHcBTwF+CTgU+P2Ftk2yLslckrlt27b1GaYkqcNYrm6qqruBS4GTqmprNR4APgWs6dhmfVXNVtXszMzMOMKUJO2gz6ubZpIc3C4/Cng+8L0kR7RlAU4GbugrBknSaPq8uukIYEOSFTTJ6AtVdX6SbyeZAQJsAt7cYwySpBH0eXXTdcDTFyg/sa9jSpKWl3dcS5I6mSQkSZ1MEpKkTiYJSVInk4QkqZNJQpLUySQhSepkkpAkdTJJSJI6mSQkSZ1MEpKkTiYJSVInk4QkqZNJQpLUySQhSepkkpAkdTJJSJI6mSQkSZ1MEpKkTr0liST7J7kqybVJbkzy/rZ8VZIrk9yU5Jwk+/YVgyRpNH32JB4ATqyqXwBWAycleSZwOvDhqjoGuAs4tccYJEkj6C1JVGN7u7pP+yrgRODctnwDcHJfMUiSRtPrmESSFUk2AbcDFwE/AO6uqgfbKrcCR3Zsuy7JXJK5bdu29RmmJKlDr0miqh6qqtXASmANcOxC1Tq2XV9Vs1U1OzMz02eYkqQOY7m6qaruBi4FngkcnGTv9qOVwI/GEYMkaen6vLppJsnB7fKjgOcDm4FLgFe01dYCX+0rBknSaPZevMouOwLYkGQFTTL6QlWdn+R/AZ9P8ofANcCZPcYgSRpBb0miqq4Dnr5A+Raa8QlJ0pTzjmtJUieThCSpk0lCktTJJCFJ6mSSkCR1MklIkjqZJCRJnUwSkqROJglJUieThCSpk0lCktTJJCFJ6mSSkCR1MklIkjqZJCRJnUwSkqROJglJUieThCSpU29JIsnjk1ySZHOSG5O8oy1/X5J/TLKpfb2krxgkSaPp7RnXwIPA71TV1UkOAjYmuaj97MNV9cc9HluStAx6SxJVtRXY2i7fl2QzcGRfx5MkLb+xjEkkORp4OnBlW/TWJNclOSvJIR3brEsyl2Ru27Zt4whTkrSD3pNEkkcDXwLeWVX3AmcAPw+spulpfGih7apqfVXNVtXszMxM32FKkhbQa5JIsg9NgvhMVX0ZoKpuq6qHquph4M+ANX3GIEnadX1e3RTgTGBzVf3JQPkRA9VeDtzQVwySpNEsOnCd5NCqunMX9n088Drg+iSb2rJ3A69Kshoo4BbgTbuwb0nSGAxzddOV7S/5TwHfqKoaZsdVdQWQBT76+hLikyRN0DCnm54ErKfpFdyc5L8leVK/YUmSpsGiSaIaF1XVq4DfAtYCVyW5LMmzeo9QkjQxw4xJHAa8lqYncRvwNuA8mktYvwis6jNASdLkDDMm8R3g08DJVXXrQPlckk/0E5YkaRoMkySe3DVYXVWnL3M8kqQpMszA9TeTHDy/kuSQJBf2GJMkaUoMkyRmquru+ZWqugt4XH8hSZKmxTBJ4qEkR82vJHkCzY1wkqQ93DBjEu8BrkhyWbv+HGBdfyFJkqbFokmiqi5I8ovAM2nuoP6PVXVH75FJkiZu2IcO7Qfc2dY/LglVdXl/YUmSpsEwN9OdDrwSuBF4uC0uwCQhSXu4YXoSJ9PcK/FA38FIkqbLMFc3bQH26TsQSdL0GaYn8WNgU5KLgZ/0Jqrq7b1FJUmaCsMkifPalyTpEWaYS2A3JHkUcFRVfX8MMUmSpsSiYxJJXgpsAi5o11cnsWchSY8Awwxcvw9YA9wNUFWbGOIZEkken+SSJJuT3JjkHW35oUkuSnJT+37ICPFLkno0TJJ4sKru2aFsmLmbHgR+p6qOpblb+y1JjgNOAy6uqmOAi9t1SdIUGiZJ3JDk1cCKJMck+SjwN4ttVFVbq+rqdvk+YDNwJPAyYENbbQPNfRiSpCk0TJJ4G/BUmstfPwfcC7xzKQdJcjTwdOBK4PCq2gpNIqFj2vEk65LMJZnbtm3bUg4nSVom6Xjo3PIdIHk0cBnwgar6cpK7q2rwIUZ3VdVOxyVmZ2drbm6u1zglaU+TZGNVzY6yj2HmbrqEBcYgqurEIbbdB/gS8Jmq+nJbfFuSI6pqa5IjgNuXGLMkaUyGuZnudweW9wd+g2ZQeqeSBDgT2FxVfzLw0XnAWuCD7ftXh45WkjRWw9xMt3GHor8eeADRzhwPvA64PsmmtuzdNMnhC0lOBf4e+LdLiFeSNEbDnG46dGB1L+AZwM8utl1VXUHzkKKFPG+o6CRJEzXM6aaNNGMSoTnN9EPg1D6DkiRNh2FONy16d7Ukac80zOmmf7OzzweuWpIk7WGGOd10KvCvgG+3688FLgXuoTkNZZKQpD3UMEmigOPm75Ju7234eFW9odfIJEkTN8y0HEfPJ4jWbcCTeopHkjRFhulJXJrkQpp5mwo4Bbik16gkSVNhmKub3prk5cBz2qL1VfWVfsOSJE2DYXoSAFcD91XVt5IckOSgdvpvSdIebJjHl74ROBf4H23RkcBf9hmUJGk6DDNw/RaaeZjuBaiqm+h4BoQkac8yTJJ4oKr+eX4lyd4M9/hSSdJubpgkcVmSdwOPSvIC4IvA1/oNS5I0DYZJEqcB24DrgTcBXwfe22dQkqTpsNOrm5KsADZU1WuBPxtPSJKkabHTnkRVPQTMJNl3TPFIkqbIMPdJ3ELzNLrzgPvnC3d4JKkkaQ/U2ZNI8ul28ZXA+W3dgwZekqQ93M56Es9I8gSa51B/dKk7TnIW8GvA7VX1tLbsfcAbaQbCAd5dVV9f6r4lSeOxsyTxCeACYBUwN1AemvsknrjIvs8GPgb8+Q7lH66qP15amJKkSeg83VRVf1pVxwKfqqonDrxWVdViCYKquhy4czmDlSSN16L3SVTVby/zMd+a5LokZyU5pKtSknVJ5pLMbdu2rauaJKlHw9xMt5zOAH4eWA1sBT7UVbGq1lfVbFXNzszMjCs+SdKAsSaJqrqtqh6qqodpbs5bM87jS5KWZqxJon0+9ryXAzeM8/iSpKUZ9qFDS5bkc8AJwGOT3Ar8V+CEJKtpro66hWYuKEnSlOotSVTVqxYoPrOv40mSlt+4B64lSbsRk4QkqZNJQpLUySQhSepkkpAkdert6ibtRj6b4eu+uvqLQ9LUsSchSepkkpAkdTJJSJI6mSQkSZ1MEpKkTiYJSVInk4QkqZNJQpLUySQhSepkkpAkdXJaDk2e04JIU8uehCSpU29JIslZSW5PcsNA2aFJLkpyU/t+SF/HlySNrs+exNnASTuUnQZcXFXHABe365KkKdVbkqiqy4E7dyh+GbChXd4AnNzX8SVJoxv3mMThVbUVoH1/XFfFJOuSzCWZ27Zt29gClCT91NQOXFfV+qqararZmZmZSYcjSY9I404StyU5AqB9v33Mx5ckLcG4k8R5wNp2eS3w1TEfX5K0BH1eAvs54DvAk5PcmuRU4IPAC5LcBLygXZckTane7riuqld1fPS8vo4pSVpeTsuhpXmkT6HxSG+/HnGm9uomSdLkmSQkSZ1MEpKkTiYJSVInB67Vn6UM8k7y+A4wS53sSUiSOpkkJEmdTBKSpE4mCUlSJ5OEJKmTVzdp99LHFVOTvgpLmmL2JCRJnUwSkqROJglJUieThCSpkwPX4DMC1A+nBdEewJ6EJKnTRHoSSW4B7gMeAh6sqtlJxCFJ2rlJnm56blXdMcHjS5IW4ekmSVKnSSWJAr6ZZGOSdROKQZK0iEmdbjq+qn6U5HHARUm+V1WXD1Zok8c6gKOOOmoSMUrTxyvxNGYT6UlU1Y/a99uBrwBrFqizvqpmq2p2ZmZm3CFKkphAkkhyYJKD5peBFwI3jDsOSdLiJnG66XDgK0nmj//ZqrpgAnFIkhYx9iRRVVuAXxj3cSVJS+e0HNOgr8FIn5MgaUTeJyFJ6mSSkCR1MklIkjqZJCRJnRy43t04GC1pjOxJSJI6mSQkSZ1MEpKkTiYJSVInk4QkqZNXN0mT5hVrmmL2JCRJnUwSkqROJglJUieThCSp0549cN3HgKCDjNpdDPtvta9nlCxlv5pa9iQkSZ1MEpKkThNJEklOSvL9JDcnOW0SMUiSFjf2JJFkBfBx4MXAccCrkhw37jgkSYubRE9iDXBzVW2pqn8GPg+8bAJxSJIWMYmrm44E/mFg/Vbgl3eslGQdsK5dfSDJDWOIbVIeC9wx6SB6tCe3b/dv22t2esXSrrdv5/udFrv/97dzTx51B5NIEgv9y/n/rpWrqvXAeoAkc1U123dgk2L7dl97ctvA9u3uksyNuo9JnG66FXj8wPpK4EcTiEOStIhJJInvAsckWZVkX+AU4LwJxCFJWsTYTzdV1YNJ3gpcCKwAzqqqGxfZbH3/kU2U7dt97cltA9u3uxu5fany1nlJ0sK841qS1MkkIUnqNDVJIsmhSS5KclP7fkhHvbVtnZuSrB0ovyDJtUluTPKJ9s7uqTFK+5IckOSvknyvbd8Hxxv9zi3Dd/eBJP+QZPv4ol7cYtPHJNkvyTnt51cmOXrgs3e15d9P8qJxxj2sXW1fksOSXJJke5KPjTvuYY3Qvhck2Zjk+vb9xHHHvpgR2rYmyab2dW2Sly96sKqaihfwR8Bp7fJpwOkL1DkU2NK+H9IuH9J+9pj2PcCXgFMm3ablah9wAPDcts6+wP8EXjzpNi3jd/dM4Ahg+6TbMhDvCuAHwBPbn/m1wHE71PkPwCfa5VOAc9rl49r6+wGr2v2smHSblrF9BwLPBt4MfGzSbemhfU8Hfq5dfhrwj5NuzzK27QBg73b5COD2+fWu19T0JGim5tjQLm8ATl6gzouAi6rqzqq6C7gIOAmgqu5t6+xN84ObthH5XW5fVf24qi4BqGYqk6tp7i+ZFqN+d39bVVvHEunwhpk+ZrDd5wLPS5K2/PNV9UBV/RC4ud3fNNnl9lXV/VV1BfBP4wt3yUZp3zVVNX/v1o3A/kn2G0vUwxmlbT+uqgfb8v0Z4vfkNCWJw+d/UbTvj1ugzkJTehw5v5LkQprMeB/ND2aajNw+gCQHAy8FLu4pzl2xLG2bMsPE+5M67X+8e4DDhtx20kZp3+5gudr3G8A1VfVAT3HuipHaluSXk9wIXA+8eSBpLGis90kk+Rbwswt89J5hd7FA2U8yYVW9KMn+wGeAE2n+Wh2bvtuXZG/gc8CfVtWWpUe46/pu2xQaJt6uOrtDW0dp3+5g5PYleSpwOvDCZYxrOYzUtqq6EnhqkmOBDUm+UVWdvcKxJomqen7XZ0luS3JEVW1NMn+ubEe3AicMrK8ELt3hGP+U5Dya7tZYk8QY2rceuKmqPrIM4S7JOL67KTPM9DHzdW5tE/jPAHcOue2kjdK+3cFI7UuyEvgK8Pqq+kH/4S7Jsnx3VbU5yf004y6dczxN0+mm84D5K17WAl9doM6FwAuTHNJeQfNC4MIkj25/Oc3/tf0S4HtjiHkpdrl9AEn+kOaLfucYYl2qkdo2pYaZPmaw3a8Avl3NiOB5wCntFSargGOAq8YU97BGad/uYJfb157S/SvgXVX112OLeHijtG1V+zuSJE+gmSX2lp0ebdIj9QOj8YfRnGe/qX0/tC2fBT45UO83aQYCbwbe0JYd3v7grqMZaPooi4zY72btW0nTVdwMbGpfvzXpNi1H29ryP6L5y+fh9v19k25TG9dLgL+juZLkPW3ZHwC/3i7vD3yxbc9VwBMHtn1Pu933maIr0ZaxfbfQ/GW6vf3Ojht3/H21D3gvcP/A/7VNwOMm3Z5latvr2t+Rm2gugDl5sWM5LYckqdM0nW6SJE0Zk4QkqZNJQpLUySQhSepkkpAkdTJJSGOQ5J1JDlimfV2aZHY59iUtxiQhjcc7aWbglHYrJglNpSSvT3JdO+f9p9uyJyS5uC2/OMlRbfnZSc5on3GwJcmvJDkryeYkZw/sc3uSDyW5ut1+pi1fneRv2/1+pb0jfP4v9tOTXJXk75L867Z8RZL/nuS77TZvastPaLc5N82zPz6TxtuBnwMuSXLJDu18cZIvDKyfkORr7fIZSebSPEPk/R0/p+0Dy6+Yb2+SmSRfamP8bpLjR/1O9Ag16TsHffna8QU8leZO5ce26/N3cH8NWNsu/ybwl+3y2TTTJc9P030v8C9o/gjaCKxu6xXwmnb5v9A+C4HmTv1faZf/APhIu3wp8KF2+SXAt9rldcB72+X9aOa9WUUzN9U9NHfI7wV8B3h2W++W+fbs0Na9gb8HDmzXzwBeu0O7V7Sx/MuBuGbb5e0D+3oFcHa7/NmBYx8FbJ709+pr93zZk9A0OhE4t6ruAKiq+YnJnkXzyw/g0zQPvpn3taoqmumPb6uq66vqYZopCI5u6zwMnNMu/wXw7CQ/AxxcVZe15RuA5wzs98vt+8aB/bwQeH2STcCVNNOSHNN+dlVV3doee9PANguqZprmC4CXtnPq/Co/nfvq3yW5GriGJnEet7N97eD5wMfaGM8DHpPkoCVsLwFjngVWGlIYbkrqwTrz8/0/PLA8v97173yYY8zv66GB/QR4W1X9PxMUJjlhh2MPbrMz5wBvoZkL6btVdV87MeDvAr9UVXe1p5H2X6QNg5/vBTyrqv7PEMeXOtmT0DS6mOav6PmHpBzalv8NzYyXAK8BrljifveiOSUD8Grgiqq6B7hrfryBZgK0yxbaeMCFwG8n2aeN70lJDlxkm/uArr/kLwV+EXgjP+3pPIZmkrl7khwOvLhj29uSHJtkL2DwecXfBN46v5Jk9SLxSQuyJ6GpU1U3JvkAcFmSh2hOt/x74O3AWUl+D9gGvGGJu76f5mErG2nGDl7Zlq8FPtFeorpliP1+kuY00tVJ0say0CNbB60HvpFka1U9d/CDqnooyfk0bVzbll2b5Bqa02VbgK4pq08Dzqd5CtkNwKPb8rcDH09yHc3/88tpnkktLYmzwOoRI8n2qnr04jUlzfN0kySpkz0JSVInexKSpE4mCUlSJ5OEJKmTSUKS1MkkIUnq9H8BIwpnb+cHdzsAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#File is used to normalize, perform PCA and FLD for dimensionality reduction\n",
    "import sys\n",
    "import math\n",
    "import timeit\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.lines as mlines\n",
    "from sklearn.decomposition import PCA\n",
    "pi= 3.14159265359\n",
    "\n",
    "def input_data(filename):\n",
    "    data = pd.read_csv(filename, sep='\\s+', header = 0)\n",
    "    return data\n",
    "\n",
    "def normalize(data,mean,sigma): #normalizes the dataset based on information in task 1\n",
    "    data=(data-mean)/sigma\n",
    "    return data\n",
    "\n",
    "def PCA_dimensions(data): #calculates the number of dimensions required to retain different variance amounts\n",
    "    cov_tr=np.cov(Xn_tr,rowvar=False)#calculates covariance matrix\n",
    "    eig_val_tr, eig_vec_tr=np.linalg.eig(cov_tr) #calculates eigenvalues and vectors of covariance matrix\n",
    "    eig_val_tr=np.abs(eig_val_tr)\n",
    "    print('Eigenvectors \\n' ,eig_vec_tr)\n",
    "    print('\\nEigenvalues \\n' ,eig_val_tr)\n",
    "\n",
    "#calculates the error after removing the smallest eigenvalue from the eigenvalues-> loops until no eigenvalues are left\n",
    "    eig_val_sort=sorted(eig_val_tr)\n",
    "    dim=7\n",
    "    var_ret_arr=np.zeros((8,2))\n",
    "    while len(eig_val_sort)>0:\n",
    "        var_ret=sum(eig_val_sort)/sum(eig_val_tr)#calculates the retained variance\n",
    "        var_ret_arr[dim][0]=dim\n",
    "        var_ret_arr[dim][1]=var_ret\n",
    "        print(dim, ' dimensions retains a variance of ', var_ret)\n",
    "        dim=dim-1\n",
    "        eig_val_sort.remove(min(eig_val_sort))\n",
    "    return var_ret_arr\n",
    "\n",
    "def PCA_projection(data):#returns the projection matrix from inputted data\n",
    "    cov_tr=np.cov(Xn_tr,rowvar=False)#calculates covariance matrix\n",
    "    eig_val_tr, eig_vec_tr=np.linalg.eig(cov_tr) #calculates eigenvalues and vectors of covariance matrix\n",
    "    eig_pairs_tr = [((eig_val_tr[i]), eig_vec_tr[:,i]) for i in range(len(eig_val_tr))]# Make a list of eigenvalue, eigenvector tuples\n",
    "    eig_pairs_tr.sort(reverse=True) #sorts the typles so that the largest eigenvalue is first\n",
    "    projection_matrix=np.hstack((eig_pairs_tr[0][1].reshape(7,1),#projection matrix only counting the first 5 eigenvalues for 5 dimensions\n",
    "                            eig_pairs_tr[1][1].reshape(7,1),\n",
    "                            eig_pairs_tr[2][1].reshape(7,1),\n",
    "                            eig_pairs_tr[3][1].reshape(7,1),\n",
    "                            eig_pairs_tr[4][1].reshape(7,1)))\n",
    "    return projection_matrix\n",
    "    \n",
    "def FLD_intraclass(class_0, class_1):\n",
    "    S_w=(class_0.shape[0]-1)*np.cov(class_0,rowvar=False)+(class_1.shape[0]-1)*np.cov(class_1,rowvar=False)\n",
    "    return S_w\n",
    "\n",
    "def FLD_projection(data,W):\n",
    "    data_t=np.transpose(data)\n",
    "    W_t=np.transpose(W)\n",
    "    projected_data=W_t@data_t\n",
    "    return projected_data\n",
    "\n",
    "#normalization\n",
    "X_tr=input_data('pima.tr')\n",
    "X_te=input_data('pima.te')\n",
    "X_tr['type']=X_tr['type'].map({'Yes':1, 'No':0}) #maps the new data type\n",
    "X_te['type']=X_te['type'].map({'Yes':1, 'No':0})\n",
    "X_tr.drop(X_tr.index[0],inplace=True) #drops the first row\n",
    "X_te.drop(X_te.index[0],inplace=True) \n",
    "X_class_tr=X_tr['type']#saves the type column\n",
    "X_class_te=X_te['type']\n",
    "X_tr.drop(['type'],axis=1,inplace=True) #drops the type column \n",
    "X_te.drop(['type'],axis=1,inplace=True)\n",
    "X_mean=X_tr.mean()\n",
    "X_sigma=X_tr.std()\n",
    "Xn_tr=normalize(X_tr, X_mean, X_sigma)#normalizes using the training data set and drops the class labels\n",
    "Xn_te=normalize(X_te, X_mean, X_sigma)\n",
    "\n",
    "#PCA\n",
    "dim_tr=PCA_dimensions(Xn_tr) # returns an array containing the retained variance for number of dimensions\n",
    "plt.figure()\n",
    "plt.plot(dim_tr[:,1])\n",
    "plt.xlabel('number of components')\n",
    "plt.ylabel('cumulative explained variance for test dataset');\n",
    "plt.savefig('cum_var.png')\n",
    "\n",
    "projection_matrix=PCA_projection(Xn_tr)#projection matrix is defined by tr and then used on te\n",
    "pX_tr=Xn_tr.dot(projection_matrix)\n",
    "pX_te=Xn_te.dot(projection_matrix)\n",
    "\n",
    "#pca=PCA(5) \n",
    "#pX_tr=pca.fit_transform(Xn_tr)#performs PCA 7->5 dimensions\n",
    "#pX_te=pca.fit_transform(Xn_te)\n",
    "\n",
    "#pX_tr = pd.DataFrame(pX_tr)#converts from np array to pandas df\n",
    "#pX_te = pd.DataFrame(pX_te) \n",
    "pX_tr=pd.concat([pX_tr,X_class_tr],axis=1)#read the classes back in\n",
    "pX_te=pd.concat([pX_te,X_class_te],axis=1)\n",
    "pX_tr.to_csv(r'/home/across/UTK_PhD/Machine_learning_fall_2019/project_2/pX.tr',index=False)\n",
    "pX_te.to_csv(r'/home/across/UTK_PhD/Machine_learning_fall_2019/project_2/pX.te',index=False)\n",
    "\n",
    "#FLD\n",
    "fX_tr=pd.concat([Xn_tr,X_class_tr],axis=1)#read the classes as we need them for FLD\n",
    "fX_te=pd.concat([Xn_te,X_class_te],axis=1)\n",
    "fX_tr_c0=fX_tr.loc[fX_tr.type==0]#split into different classes\n",
    "fX_tr_c1=fX_tr.loc[fX_tr.type==1]\n",
    "fX_tr_c0.drop(['type'],axis=1,inplace=True) #drops the type column \n",
    "fX_tr_c1.drop(['type'],axis=1,inplace=True) \n",
    "fX_te_c0=fX_te.loc[fX_te.type==0]#split into different classes\n",
    "fX_te_c1=fX_te.loc[fX_te.type==1]\n",
    "fX_te_c0.drop(['type'],axis=1,inplace=True) #drops the type column \n",
    "fX_te_c1.drop(['type'],axis=1,inplace=True) \n",
    "\n",
    "#calculates the W matrix required for projection from the training data\n",
    "mean=fX_tr_c0.mean()-fX_tr_c1.mean()\n",
    "W=np.linalg.inv(FLD_intraclass(fX_tr_c0,fX_tr_c1))@mean\n",
    "#projects the new datasets for each class\n",
    "fX_tr_c0=FLD_projection(fX_tr_c0,W)\n",
    "fX_tr_c1=FLD_projection(fX_tr_c1,W)\n",
    "fX_te_c0=FLD_projection(fX_te_c0,W)\n",
    "fX_te_c1=FLD_projection(fX_te_c1,W)\n",
    "plt.figure()\n",
    "plt.hist(fX_te_c0,bins=25)\n",
    "plt.xlabel('component value')\n",
    "plt.ylabel('frequency');\n",
    "plt.xlim([-.030,.030])\n",
    "plt.ylim([0,40])\n",
    "plt.hist(fX_te_c1,bins=25,color='orange')\n",
    "plt.savefig('FLD_freq_combined.png')\n",
    "plt.figure()\n",
    "plt.hist(fX_te_c0,bins=25)\n",
    "plt.xlabel('component value')\n",
    "plt.ylabel('frequency');\n",
    "plt.xlim([-.030,.020])\n",
    "plt.ylim([0,40])\n",
    "plt.savefig('FLD_freq_c0.png')\n",
    "plt.figure()\n",
    "plt.hist(fX_te_c1,bins=25,color='orange')\n",
    "plt.xlabel('component value')\n",
    "plt.ylabel('frequency');\n",
    "plt.xlim([-.030,.030])\n",
    "plt.ylim([0,40])\n",
    "plt.savefig('FLD_freq_c1.png')\n",
    "\n",
    "fX_tr_c0 = pd.DataFrame(fX_tr_c0) \n",
    "fX_tr_c0.insert( 1,\"type\", 0) \n",
    "fX_tr_c1 = pd.DataFrame(fX_tr_c1) \n",
    "fX_tr_c1.insert( 1,\"type\", 1) \n",
    "fX_te_c0 = pd.DataFrame(fX_te_c0) \n",
    "fX_te_c0.insert( 1,\"type\", 0) \n",
    "fX_te_c1 = pd.DataFrame(fX_te_c1) \n",
    "fX_te_c1.insert( 1,\"type\", 1)\n",
    "\n",
    "\n",
    "fX_tr=pd.concat([fX_tr_c0,fX_tr_c1],axis=0)\n",
    "fX_te=pd.concat([fX_te_c0,fX_te_c1],axis=0)\n",
    "fX_tr.to_csv(r'/home/across/UTK_PhD/Machine_learning_fall_2019/project_2/fX.tr',index=False)\n",
    "fX_te.to_csv(r'/home/across/UTK_PhD/Machine_learning_fall_2019/project_2/fX.te',index=False)\n",
    "\n",
    "\n",
    "Xn_tr=pd.concat([Xn_tr,X_class_tr],axis=1)#read the classes back in\n",
    "Xn_te=pd.concat([Xn_te,X_class_te],axis=1)\n",
    "Xn_tr.to_csv(r'/home/across/UTK_PhD/Machine_learning_fall_2019/project_2/Xn.tr',index=False)\n",
    "Xn_te.to_csv(r'/home/across/UTK_PhD/Machine_learning_fall_2019/project_2/Xn.te',index=False)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
